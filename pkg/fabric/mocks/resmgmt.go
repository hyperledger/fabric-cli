// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/hyperledger/fabric-cli/pkg/fabric"
	"github.com/hyperledger/fabric-protos-go/common"
	"github.com/hyperledger/fabric-protos-go/peer"
	"github.com/hyperledger/fabric-sdk-go/pkg/client/resmgmt"
	"github.com/hyperledger/fabric-sdk-go/pkg/common/providers/fab"
	"github.com/hyperledger/fabric-sdk-go/pkg/common/providers/msp"
	"github.com/hyperledger/fabric-sdk-go/pkg/fab/resource"
)

type ResourceManagement struct {
	CreateConfigSignatureStub        func(msp.SigningIdentity, string) (*common.ConfigSignature, error)
	createConfigSignatureMutex       sync.RWMutex
	createConfigSignatureArgsForCall []struct {
		arg1 msp.SigningIdentity
		arg2 string
	}
	createConfigSignatureReturns struct {
		result1 *common.ConfigSignature
		result2 error
	}
	createConfigSignatureReturnsOnCall map[int]struct {
		result1 *common.ConfigSignature
		result2 error
	}
	CreateConfigSignatureDataStub        func(msp.SigningIdentity, string) (resource.ConfigSignatureData, error)
	createConfigSignatureDataMutex       sync.RWMutex
	createConfigSignatureDataArgsForCall []struct {
		arg1 msp.SigningIdentity
		arg2 string
	}
	createConfigSignatureDataReturns struct {
		result1 resource.ConfigSignatureData
		result2 error
	}
	createConfigSignatureDataReturnsOnCall map[int]struct {
		result1 resource.ConfigSignatureData
		result2 error
	}
	InstallCCStub        func(resmgmt.InstallCCRequest, ...resmgmt.RequestOption) ([]resmgmt.InstallCCResponse, error)
	installCCMutex       sync.RWMutex
	installCCArgsForCall []struct {
		arg1 resmgmt.InstallCCRequest
		arg2 []resmgmt.RequestOption
	}
	installCCReturns struct {
		result1 []resmgmt.InstallCCResponse
		result2 error
	}
	installCCReturnsOnCall map[int]struct {
		result1 []resmgmt.InstallCCResponse
		result2 error
	}
	InstantiateCCStub        func(string, resmgmt.InstantiateCCRequest, ...resmgmt.RequestOption) (resmgmt.InstantiateCCResponse, error)
	instantiateCCMutex       sync.RWMutex
	instantiateCCArgsForCall []struct {
		arg1 string
		arg2 resmgmt.InstantiateCCRequest
		arg3 []resmgmt.RequestOption
	}
	instantiateCCReturns struct {
		result1 resmgmt.InstantiateCCResponse
		result2 error
	}
	instantiateCCReturnsOnCall map[int]struct {
		result1 resmgmt.InstantiateCCResponse
		result2 error
	}
	JoinChannelStub        func(string, ...resmgmt.RequestOption) error
	joinChannelMutex       sync.RWMutex
	joinChannelArgsForCall []struct {
		arg1 string
		arg2 []resmgmt.RequestOption
	}
	joinChannelReturns struct {
		result1 error
	}
	joinChannelReturnsOnCall map[int]struct {
		result1 error
	}
	LifecycleApproveCCStub        func(string, resmgmt.LifecycleApproveCCRequest, ...resmgmt.RequestOption) (fab.TransactionID, error)
	lifecycleApproveCCMutex       sync.RWMutex
	lifecycleApproveCCArgsForCall []struct {
		arg1 string
		arg2 resmgmt.LifecycleApproveCCRequest
		arg3 []resmgmt.RequestOption
	}
	lifecycleApproveCCReturns struct {
		result1 fab.TransactionID
		result2 error
	}
	lifecycleApproveCCReturnsOnCall map[int]struct {
		result1 fab.TransactionID
		result2 error
	}
	LifecycleCheckCCCommitReadinessStub        func(string, resmgmt.LifecycleCheckCCCommitReadinessRequest, ...resmgmt.RequestOption) (resmgmt.LifecycleCheckCCCommitReadinessResponse, error)
	lifecycleCheckCCCommitReadinessMutex       sync.RWMutex
	lifecycleCheckCCCommitReadinessArgsForCall []struct {
		arg1 string
		arg2 resmgmt.LifecycleCheckCCCommitReadinessRequest
		arg3 []resmgmt.RequestOption
	}
	lifecycleCheckCCCommitReadinessReturns struct {
		result1 resmgmt.LifecycleCheckCCCommitReadinessResponse
		result2 error
	}
	lifecycleCheckCCCommitReadinessReturnsOnCall map[int]struct {
		result1 resmgmt.LifecycleCheckCCCommitReadinessResponse
		result2 error
	}
	LifecycleCommitCCStub        func(string, resmgmt.LifecycleCommitCCRequest, ...resmgmt.RequestOption) (fab.TransactionID, error)
	lifecycleCommitCCMutex       sync.RWMutex
	lifecycleCommitCCArgsForCall []struct {
		arg1 string
		arg2 resmgmt.LifecycleCommitCCRequest
		arg3 []resmgmt.RequestOption
	}
	lifecycleCommitCCReturns struct {
		result1 fab.TransactionID
		result2 error
	}
	lifecycleCommitCCReturnsOnCall map[int]struct {
		result1 fab.TransactionID
		result2 error
	}
	LifecycleInstallCCStub        func(resmgmt.LifecycleInstallCCRequest, ...resmgmt.RequestOption) ([]resmgmt.LifecycleInstallCCResponse, error)
	lifecycleInstallCCMutex       sync.RWMutex
	lifecycleInstallCCArgsForCall []struct {
		arg1 resmgmt.LifecycleInstallCCRequest
		arg2 []resmgmt.RequestOption
	}
	lifecycleInstallCCReturns struct {
		result1 []resmgmt.LifecycleInstallCCResponse
		result2 error
	}
	lifecycleInstallCCReturnsOnCall map[int]struct {
		result1 []resmgmt.LifecycleInstallCCResponse
		result2 error
	}
	LifecycleQueryApprovedCCStub        func(string, resmgmt.LifecycleQueryApprovedCCRequest, ...resmgmt.RequestOption) (resmgmt.LifecycleApprovedChaincodeDefinition, error)
	lifecycleQueryApprovedCCMutex       sync.RWMutex
	lifecycleQueryApprovedCCArgsForCall []struct {
		arg1 string
		arg2 resmgmt.LifecycleQueryApprovedCCRequest
		arg3 []resmgmt.RequestOption
	}
	lifecycleQueryApprovedCCReturns struct {
		result1 resmgmt.LifecycleApprovedChaincodeDefinition
		result2 error
	}
	lifecycleQueryApprovedCCReturnsOnCall map[int]struct {
		result1 resmgmt.LifecycleApprovedChaincodeDefinition
		result2 error
	}
	LifecycleQueryCommittedCCStub        func(string, resmgmt.LifecycleQueryCommittedCCRequest, ...resmgmt.RequestOption) ([]resmgmt.LifecycleChaincodeDefinition, error)
	lifecycleQueryCommittedCCMutex       sync.RWMutex
	lifecycleQueryCommittedCCArgsForCall []struct {
		arg1 string
		arg2 resmgmt.LifecycleQueryCommittedCCRequest
		arg3 []resmgmt.RequestOption
	}
	lifecycleQueryCommittedCCReturns struct {
		result1 []resmgmt.LifecycleChaincodeDefinition
		result2 error
	}
	lifecycleQueryCommittedCCReturnsOnCall map[int]struct {
		result1 []resmgmt.LifecycleChaincodeDefinition
		result2 error
	}
	LifecycleQueryInstalledCCStub        func(...resmgmt.RequestOption) ([]resmgmt.LifecycleInstalledCC, error)
	lifecycleQueryInstalledCCMutex       sync.RWMutex
	lifecycleQueryInstalledCCArgsForCall []struct {
		arg1 []resmgmt.RequestOption
	}
	lifecycleQueryInstalledCCReturns struct {
		result1 []resmgmt.LifecycleInstalledCC
		result2 error
	}
	lifecycleQueryInstalledCCReturnsOnCall map[int]struct {
		result1 []resmgmt.LifecycleInstalledCC
		result2 error
	}
	QueryChannelsStub        func(...resmgmt.RequestOption) (*peer.ChannelQueryResponse, error)
	queryChannelsMutex       sync.RWMutex
	queryChannelsArgsForCall []struct {
		arg1 []resmgmt.RequestOption
	}
	queryChannelsReturns struct {
		result1 *peer.ChannelQueryResponse
		result2 error
	}
	queryChannelsReturnsOnCall map[int]struct {
		result1 *peer.ChannelQueryResponse
		result2 error
	}
	QueryCollectionsConfigStub        func(string, string, ...resmgmt.RequestOption) (*peer.CollectionConfigPackage, error)
	queryCollectionsConfigMutex       sync.RWMutex
	queryCollectionsConfigArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 []resmgmt.RequestOption
	}
	queryCollectionsConfigReturns struct {
		result1 *peer.CollectionConfigPackage
		result2 error
	}
	queryCollectionsConfigReturnsOnCall map[int]struct {
		result1 *peer.CollectionConfigPackage
		result2 error
	}
	QueryConfigFromOrdererStub        func(string, ...resmgmt.RequestOption) (fab.ChannelCfg, error)
	queryConfigFromOrdererMutex       sync.RWMutex
	queryConfigFromOrdererArgsForCall []struct {
		arg1 string
		arg2 []resmgmt.RequestOption
	}
	queryConfigFromOrdererReturns struct {
		result1 fab.ChannelCfg
		result2 error
	}
	queryConfigFromOrdererReturnsOnCall map[int]struct {
		result1 fab.ChannelCfg
		result2 error
	}
	QueryInstalledChaincodesStub        func(...resmgmt.RequestOption) (*peer.ChaincodeQueryResponse, error)
	queryInstalledChaincodesMutex       sync.RWMutex
	queryInstalledChaincodesArgsForCall []struct {
		arg1 []resmgmt.RequestOption
	}
	queryInstalledChaincodesReturns struct {
		result1 *peer.ChaincodeQueryResponse
		result2 error
	}
	queryInstalledChaincodesReturnsOnCall map[int]struct {
		result1 *peer.ChaincodeQueryResponse
		result2 error
	}
	QueryInstantiatedChaincodesStub        func(string, ...resmgmt.RequestOption) (*peer.ChaincodeQueryResponse, error)
	queryInstantiatedChaincodesMutex       sync.RWMutex
	queryInstantiatedChaincodesArgsForCall []struct {
		arg1 string
		arg2 []resmgmt.RequestOption
	}
	queryInstantiatedChaincodesReturns struct {
		result1 *peer.ChaincodeQueryResponse
		result2 error
	}
	queryInstantiatedChaincodesReturnsOnCall map[int]struct {
		result1 *peer.ChaincodeQueryResponse
		result2 error
	}
	SaveChannelStub        func(resmgmt.SaveChannelRequest, ...resmgmt.RequestOption) (resmgmt.SaveChannelResponse, error)
	saveChannelMutex       sync.RWMutex
	saveChannelArgsForCall []struct {
		arg1 resmgmt.SaveChannelRequest
		arg2 []resmgmt.RequestOption
	}
	saveChannelReturns struct {
		result1 resmgmt.SaveChannelResponse
		result2 error
	}
	saveChannelReturnsOnCall map[int]struct {
		result1 resmgmt.SaveChannelResponse
		result2 error
	}
	UpgradeCCStub        func(string, resmgmt.UpgradeCCRequest, ...resmgmt.RequestOption) (resmgmt.UpgradeCCResponse, error)
	upgradeCCMutex       sync.RWMutex
	upgradeCCArgsForCall []struct {
		arg1 string
		arg2 resmgmt.UpgradeCCRequest
		arg3 []resmgmt.RequestOption
	}
	upgradeCCReturns struct {
		result1 resmgmt.UpgradeCCResponse
		result2 error
	}
	upgradeCCReturnsOnCall map[int]struct {
		result1 resmgmt.UpgradeCCResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ResourceManagement) CreateConfigSignature(arg1 msp.SigningIdentity, arg2 string) (*common.ConfigSignature, error) {
	fake.createConfigSignatureMutex.Lock()
	ret, specificReturn := fake.createConfigSignatureReturnsOnCall[len(fake.createConfigSignatureArgsForCall)]
	fake.createConfigSignatureArgsForCall = append(fake.createConfigSignatureArgsForCall, struct {
		arg1 msp.SigningIdentity
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateConfigSignature", []interface{}{arg1, arg2})
	fake.createConfigSignatureMutex.Unlock()
	if fake.CreateConfigSignatureStub != nil {
		return fake.CreateConfigSignatureStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createConfigSignatureReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) CreateConfigSignatureCallCount() int {
	fake.createConfigSignatureMutex.RLock()
	defer fake.createConfigSignatureMutex.RUnlock()
	return len(fake.createConfigSignatureArgsForCall)
}

func (fake *ResourceManagement) CreateConfigSignatureCalls(stub func(msp.SigningIdentity, string) (*common.ConfigSignature, error)) {
	fake.createConfigSignatureMutex.Lock()
	defer fake.createConfigSignatureMutex.Unlock()
	fake.CreateConfigSignatureStub = stub
}

func (fake *ResourceManagement) CreateConfigSignatureArgsForCall(i int) (msp.SigningIdentity, string) {
	fake.createConfigSignatureMutex.RLock()
	defer fake.createConfigSignatureMutex.RUnlock()
	argsForCall := fake.createConfigSignatureArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ResourceManagement) CreateConfigSignatureReturns(result1 *common.ConfigSignature, result2 error) {
	fake.createConfigSignatureMutex.Lock()
	defer fake.createConfigSignatureMutex.Unlock()
	fake.CreateConfigSignatureStub = nil
	fake.createConfigSignatureReturns = struct {
		result1 *common.ConfigSignature
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) CreateConfigSignatureReturnsOnCall(i int, result1 *common.ConfigSignature, result2 error) {
	fake.createConfigSignatureMutex.Lock()
	defer fake.createConfigSignatureMutex.Unlock()
	fake.CreateConfigSignatureStub = nil
	if fake.createConfigSignatureReturnsOnCall == nil {
		fake.createConfigSignatureReturnsOnCall = make(map[int]struct {
			result1 *common.ConfigSignature
			result2 error
		})
	}
	fake.createConfigSignatureReturnsOnCall[i] = struct {
		result1 *common.ConfigSignature
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) CreateConfigSignatureData(arg1 msp.SigningIdentity, arg2 string) (resource.ConfigSignatureData, error) {
	fake.createConfigSignatureDataMutex.Lock()
	ret, specificReturn := fake.createConfigSignatureDataReturnsOnCall[len(fake.createConfigSignatureDataArgsForCall)]
	fake.createConfigSignatureDataArgsForCall = append(fake.createConfigSignatureDataArgsForCall, struct {
		arg1 msp.SigningIdentity
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("CreateConfigSignatureData", []interface{}{arg1, arg2})
	fake.createConfigSignatureDataMutex.Unlock()
	if fake.CreateConfigSignatureDataStub != nil {
		return fake.CreateConfigSignatureDataStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createConfigSignatureDataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) CreateConfigSignatureDataCallCount() int {
	fake.createConfigSignatureDataMutex.RLock()
	defer fake.createConfigSignatureDataMutex.RUnlock()
	return len(fake.createConfigSignatureDataArgsForCall)
}

func (fake *ResourceManagement) CreateConfigSignatureDataCalls(stub func(msp.SigningIdentity, string) (resource.ConfigSignatureData, error)) {
	fake.createConfigSignatureDataMutex.Lock()
	defer fake.createConfigSignatureDataMutex.Unlock()
	fake.CreateConfigSignatureDataStub = stub
}

func (fake *ResourceManagement) CreateConfigSignatureDataArgsForCall(i int) (msp.SigningIdentity, string) {
	fake.createConfigSignatureDataMutex.RLock()
	defer fake.createConfigSignatureDataMutex.RUnlock()
	argsForCall := fake.createConfigSignatureDataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ResourceManagement) CreateConfigSignatureDataReturns(result1 resource.ConfigSignatureData, result2 error) {
	fake.createConfigSignatureDataMutex.Lock()
	defer fake.createConfigSignatureDataMutex.Unlock()
	fake.CreateConfigSignatureDataStub = nil
	fake.createConfigSignatureDataReturns = struct {
		result1 resource.ConfigSignatureData
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) CreateConfigSignatureDataReturnsOnCall(i int, result1 resource.ConfigSignatureData, result2 error) {
	fake.createConfigSignatureDataMutex.Lock()
	defer fake.createConfigSignatureDataMutex.Unlock()
	fake.CreateConfigSignatureDataStub = nil
	if fake.createConfigSignatureDataReturnsOnCall == nil {
		fake.createConfigSignatureDataReturnsOnCall = make(map[int]struct {
			result1 resource.ConfigSignatureData
			result2 error
		})
	}
	fake.createConfigSignatureDataReturnsOnCall[i] = struct {
		result1 resource.ConfigSignatureData
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) InstallCC(arg1 resmgmt.InstallCCRequest, arg2 ...resmgmt.RequestOption) ([]resmgmt.InstallCCResponse, error) {
	fake.installCCMutex.Lock()
	ret, specificReturn := fake.installCCReturnsOnCall[len(fake.installCCArgsForCall)]
	fake.installCCArgsForCall = append(fake.installCCArgsForCall, struct {
		arg1 resmgmt.InstallCCRequest
		arg2 []resmgmt.RequestOption
	}{arg1, arg2})
	fake.recordInvocation("InstallCC", []interface{}{arg1, arg2})
	fake.installCCMutex.Unlock()
	if fake.InstallCCStub != nil {
		return fake.InstallCCStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.installCCReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) InstallCCCallCount() int {
	fake.installCCMutex.RLock()
	defer fake.installCCMutex.RUnlock()
	return len(fake.installCCArgsForCall)
}

func (fake *ResourceManagement) InstallCCCalls(stub func(resmgmt.InstallCCRequest, ...resmgmt.RequestOption) ([]resmgmt.InstallCCResponse, error)) {
	fake.installCCMutex.Lock()
	defer fake.installCCMutex.Unlock()
	fake.InstallCCStub = stub
}

func (fake *ResourceManagement) InstallCCArgsForCall(i int) (resmgmt.InstallCCRequest, []resmgmt.RequestOption) {
	fake.installCCMutex.RLock()
	defer fake.installCCMutex.RUnlock()
	argsForCall := fake.installCCArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ResourceManagement) InstallCCReturns(result1 []resmgmt.InstallCCResponse, result2 error) {
	fake.installCCMutex.Lock()
	defer fake.installCCMutex.Unlock()
	fake.InstallCCStub = nil
	fake.installCCReturns = struct {
		result1 []resmgmt.InstallCCResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) InstallCCReturnsOnCall(i int, result1 []resmgmt.InstallCCResponse, result2 error) {
	fake.installCCMutex.Lock()
	defer fake.installCCMutex.Unlock()
	fake.InstallCCStub = nil
	if fake.installCCReturnsOnCall == nil {
		fake.installCCReturnsOnCall = make(map[int]struct {
			result1 []resmgmt.InstallCCResponse
			result2 error
		})
	}
	fake.installCCReturnsOnCall[i] = struct {
		result1 []resmgmt.InstallCCResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) InstantiateCC(arg1 string, arg2 resmgmt.InstantiateCCRequest, arg3 ...resmgmt.RequestOption) (resmgmt.InstantiateCCResponse, error) {
	fake.instantiateCCMutex.Lock()
	ret, specificReturn := fake.instantiateCCReturnsOnCall[len(fake.instantiateCCArgsForCall)]
	fake.instantiateCCArgsForCall = append(fake.instantiateCCArgsForCall, struct {
		arg1 string
		arg2 resmgmt.InstantiateCCRequest
		arg3 []resmgmt.RequestOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("InstantiateCC", []interface{}{arg1, arg2, arg3})
	fake.instantiateCCMutex.Unlock()
	if fake.InstantiateCCStub != nil {
		return fake.InstantiateCCStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.instantiateCCReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) InstantiateCCCallCount() int {
	fake.instantiateCCMutex.RLock()
	defer fake.instantiateCCMutex.RUnlock()
	return len(fake.instantiateCCArgsForCall)
}

func (fake *ResourceManagement) InstantiateCCCalls(stub func(string, resmgmt.InstantiateCCRequest, ...resmgmt.RequestOption) (resmgmt.InstantiateCCResponse, error)) {
	fake.instantiateCCMutex.Lock()
	defer fake.instantiateCCMutex.Unlock()
	fake.InstantiateCCStub = stub
}

func (fake *ResourceManagement) InstantiateCCArgsForCall(i int) (string, resmgmt.InstantiateCCRequest, []resmgmt.RequestOption) {
	fake.instantiateCCMutex.RLock()
	defer fake.instantiateCCMutex.RUnlock()
	argsForCall := fake.instantiateCCArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ResourceManagement) InstantiateCCReturns(result1 resmgmt.InstantiateCCResponse, result2 error) {
	fake.instantiateCCMutex.Lock()
	defer fake.instantiateCCMutex.Unlock()
	fake.InstantiateCCStub = nil
	fake.instantiateCCReturns = struct {
		result1 resmgmt.InstantiateCCResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) InstantiateCCReturnsOnCall(i int, result1 resmgmt.InstantiateCCResponse, result2 error) {
	fake.instantiateCCMutex.Lock()
	defer fake.instantiateCCMutex.Unlock()
	fake.InstantiateCCStub = nil
	if fake.instantiateCCReturnsOnCall == nil {
		fake.instantiateCCReturnsOnCall = make(map[int]struct {
			result1 resmgmt.InstantiateCCResponse
			result2 error
		})
	}
	fake.instantiateCCReturnsOnCall[i] = struct {
		result1 resmgmt.InstantiateCCResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) JoinChannel(arg1 string, arg2 ...resmgmt.RequestOption) error {
	fake.joinChannelMutex.Lock()
	ret, specificReturn := fake.joinChannelReturnsOnCall[len(fake.joinChannelArgsForCall)]
	fake.joinChannelArgsForCall = append(fake.joinChannelArgsForCall, struct {
		arg1 string
		arg2 []resmgmt.RequestOption
	}{arg1, arg2})
	fake.recordInvocation("JoinChannel", []interface{}{arg1, arg2})
	fake.joinChannelMutex.Unlock()
	if fake.JoinChannelStub != nil {
		return fake.JoinChannelStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.joinChannelReturns
	return fakeReturns.result1
}

func (fake *ResourceManagement) JoinChannelCallCount() int {
	fake.joinChannelMutex.RLock()
	defer fake.joinChannelMutex.RUnlock()
	return len(fake.joinChannelArgsForCall)
}

func (fake *ResourceManagement) JoinChannelCalls(stub func(string, ...resmgmt.RequestOption) error) {
	fake.joinChannelMutex.Lock()
	defer fake.joinChannelMutex.Unlock()
	fake.JoinChannelStub = stub
}

func (fake *ResourceManagement) JoinChannelArgsForCall(i int) (string, []resmgmt.RequestOption) {
	fake.joinChannelMutex.RLock()
	defer fake.joinChannelMutex.RUnlock()
	argsForCall := fake.joinChannelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ResourceManagement) JoinChannelReturns(result1 error) {
	fake.joinChannelMutex.Lock()
	defer fake.joinChannelMutex.Unlock()
	fake.JoinChannelStub = nil
	fake.joinChannelReturns = struct {
		result1 error
	}{result1}
}

func (fake *ResourceManagement) JoinChannelReturnsOnCall(i int, result1 error) {
	fake.joinChannelMutex.Lock()
	defer fake.joinChannelMutex.Unlock()
	fake.JoinChannelStub = nil
	if fake.joinChannelReturnsOnCall == nil {
		fake.joinChannelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.joinChannelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ResourceManagement) LifecycleApproveCC(arg1 string, arg2 resmgmt.LifecycleApproveCCRequest, arg3 ...resmgmt.RequestOption) (fab.TransactionID, error) {
	fake.lifecycleApproveCCMutex.Lock()
	ret, specificReturn := fake.lifecycleApproveCCReturnsOnCall[len(fake.lifecycleApproveCCArgsForCall)]
	fake.lifecycleApproveCCArgsForCall = append(fake.lifecycleApproveCCArgsForCall, struct {
		arg1 string
		arg2 resmgmt.LifecycleApproveCCRequest
		arg3 []resmgmt.RequestOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("LifecycleApproveCC", []interface{}{arg1, arg2, arg3})
	fake.lifecycleApproveCCMutex.Unlock()
	if fake.LifecycleApproveCCStub != nil {
		return fake.LifecycleApproveCCStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.lifecycleApproveCCReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) LifecycleApproveCCCallCount() int {
	fake.lifecycleApproveCCMutex.RLock()
	defer fake.lifecycleApproveCCMutex.RUnlock()
	return len(fake.lifecycleApproveCCArgsForCall)
}

func (fake *ResourceManagement) LifecycleApproveCCCalls(stub func(string, resmgmt.LifecycleApproveCCRequest, ...resmgmt.RequestOption) (fab.TransactionID, error)) {
	fake.lifecycleApproveCCMutex.Lock()
	defer fake.lifecycleApproveCCMutex.Unlock()
	fake.LifecycleApproveCCStub = stub
}

func (fake *ResourceManagement) LifecycleApproveCCArgsForCall(i int) (string, resmgmt.LifecycleApproveCCRequest, []resmgmt.RequestOption) {
	fake.lifecycleApproveCCMutex.RLock()
	defer fake.lifecycleApproveCCMutex.RUnlock()
	argsForCall := fake.lifecycleApproveCCArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ResourceManagement) LifecycleApproveCCReturns(result1 fab.TransactionID, result2 error) {
	fake.lifecycleApproveCCMutex.Lock()
	defer fake.lifecycleApproveCCMutex.Unlock()
	fake.LifecycleApproveCCStub = nil
	fake.lifecycleApproveCCReturns = struct {
		result1 fab.TransactionID
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleApproveCCReturnsOnCall(i int, result1 fab.TransactionID, result2 error) {
	fake.lifecycleApproveCCMutex.Lock()
	defer fake.lifecycleApproveCCMutex.Unlock()
	fake.LifecycleApproveCCStub = nil
	if fake.lifecycleApproveCCReturnsOnCall == nil {
		fake.lifecycleApproveCCReturnsOnCall = make(map[int]struct {
			result1 fab.TransactionID
			result2 error
		})
	}
	fake.lifecycleApproveCCReturnsOnCall[i] = struct {
		result1 fab.TransactionID
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleCheckCCCommitReadiness(arg1 string, arg2 resmgmt.LifecycleCheckCCCommitReadinessRequest, arg3 ...resmgmt.RequestOption) (resmgmt.LifecycleCheckCCCommitReadinessResponse, error) {
	fake.lifecycleCheckCCCommitReadinessMutex.Lock()
	ret, specificReturn := fake.lifecycleCheckCCCommitReadinessReturnsOnCall[len(fake.lifecycleCheckCCCommitReadinessArgsForCall)]
	fake.lifecycleCheckCCCommitReadinessArgsForCall = append(fake.lifecycleCheckCCCommitReadinessArgsForCall, struct {
		arg1 string
		arg2 resmgmt.LifecycleCheckCCCommitReadinessRequest
		arg3 []resmgmt.RequestOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("LifecycleCheckCCCommitReadiness", []interface{}{arg1, arg2, arg3})
	fake.lifecycleCheckCCCommitReadinessMutex.Unlock()
	if fake.LifecycleCheckCCCommitReadinessStub != nil {
		return fake.LifecycleCheckCCCommitReadinessStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.lifecycleCheckCCCommitReadinessReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) LifecycleCheckCCCommitReadinessCallCount() int {
	fake.lifecycleCheckCCCommitReadinessMutex.RLock()
	defer fake.lifecycleCheckCCCommitReadinessMutex.RUnlock()
	return len(fake.lifecycleCheckCCCommitReadinessArgsForCall)
}

func (fake *ResourceManagement) LifecycleCheckCCCommitReadinessCalls(stub func(string, resmgmt.LifecycleCheckCCCommitReadinessRequest, ...resmgmt.RequestOption) (resmgmt.LifecycleCheckCCCommitReadinessResponse, error)) {
	fake.lifecycleCheckCCCommitReadinessMutex.Lock()
	defer fake.lifecycleCheckCCCommitReadinessMutex.Unlock()
	fake.LifecycleCheckCCCommitReadinessStub = stub
}

func (fake *ResourceManagement) LifecycleCheckCCCommitReadinessArgsForCall(i int) (string, resmgmt.LifecycleCheckCCCommitReadinessRequest, []resmgmt.RequestOption) {
	fake.lifecycleCheckCCCommitReadinessMutex.RLock()
	defer fake.lifecycleCheckCCCommitReadinessMutex.RUnlock()
	argsForCall := fake.lifecycleCheckCCCommitReadinessArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ResourceManagement) LifecycleCheckCCCommitReadinessReturns(result1 resmgmt.LifecycleCheckCCCommitReadinessResponse, result2 error) {
	fake.lifecycleCheckCCCommitReadinessMutex.Lock()
	defer fake.lifecycleCheckCCCommitReadinessMutex.Unlock()
	fake.LifecycleCheckCCCommitReadinessStub = nil
	fake.lifecycleCheckCCCommitReadinessReturns = struct {
		result1 resmgmt.LifecycleCheckCCCommitReadinessResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleCheckCCCommitReadinessReturnsOnCall(i int, result1 resmgmt.LifecycleCheckCCCommitReadinessResponse, result2 error) {
	fake.lifecycleCheckCCCommitReadinessMutex.Lock()
	defer fake.lifecycleCheckCCCommitReadinessMutex.Unlock()
	fake.LifecycleCheckCCCommitReadinessStub = nil
	if fake.lifecycleCheckCCCommitReadinessReturnsOnCall == nil {
		fake.lifecycleCheckCCCommitReadinessReturnsOnCall = make(map[int]struct {
			result1 resmgmt.LifecycleCheckCCCommitReadinessResponse
			result2 error
		})
	}
	fake.lifecycleCheckCCCommitReadinessReturnsOnCall[i] = struct {
		result1 resmgmt.LifecycleCheckCCCommitReadinessResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleCommitCC(arg1 string, arg2 resmgmt.LifecycleCommitCCRequest, arg3 ...resmgmt.RequestOption) (fab.TransactionID, error) {
	fake.lifecycleCommitCCMutex.Lock()
	ret, specificReturn := fake.lifecycleCommitCCReturnsOnCall[len(fake.lifecycleCommitCCArgsForCall)]
	fake.lifecycleCommitCCArgsForCall = append(fake.lifecycleCommitCCArgsForCall, struct {
		arg1 string
		arg2 resmgmt.LifecycleCommitCCRequest
		arg3 []resmgmt.RequestOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("LifecycleCommitCC", []interface{}{arg1, arg2, arg3})
	fake.lifecycleCommitCCMutex.Unlock()
	if fake.LifecycleCommitCCStub != nil {
		return fake.LifecycleCommitCCStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.lifecycleCommitCCReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) LifecycleCommitCCCallCount() int {
	fake.lifecycleCommitCCMutex.RLock()
	defer fake.lifecycleCommitCCMutex.RUnlock()
	return len(fake.lifecycleCommitCCArgsForCall)
}

func (fake *ResourceManagement) LifecycleCommitCCCalls(stub func(string, resmgmt.LifecycleCommitCCRequest, ...resmgmt.RequestOption) (fab.TransactionID, error)) {
	fake.lifecycleCommitCCMutex.Lock()
	defer fake.lifecycleCommitCCMutex.Unlock()
	fake.LifecycleCommitCCStub = stub
}

func (fake *ResourceManagement) LifecycleCommitCCArgsForCall(i int) (string, resmgmt.LifecycleCommitCCRequest, []resmgmt.RequestOption) {
	fake.lifecycleCommitCCMutex.RLock()
	defer fake.lifecycleCommitCCMutex.RUnlock()
	argsForCall := fake.lifecycleCommitCCArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ResourceManagement) LifecycleCommitCCReturns(result1 fab.TransactionID, result2 error) {
	fake.lifecycleCommitCCMutex.Lock()
	defer fake.lifecycleCommitCCMutex.Unlock()
	fake.LifecycleCommitCCStub = nil
	fake.lifecycleCommitCCReturns = struct {
		result1 fab.TransactionID
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleCommitCCReturnsOnCall(i int, result1 fab.TransactionID, result2 error) {
	fake.lifecycleCommitCCMutex.Lock()
	defer fake.lifecycleCommitCCMutex.Unlock()
	fake.LifecycleCommitCCStub = nil
	if fake.lifecycleCommitCCReturnsOnCall == nil {
		fake.lifecycleCommitCCReturnsOnCall = make(map[int]struct {
			result1 fab.TransactionID
			result2 error
		})
	}
	fake.lifecycleCommitCCReturnsOnCall[i] = struct {
		result1 fab.TransactionID
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleInstallCC(arg1 resmgmt.LifecycleInstallCCRequest, arg2 ...resmgmt.RequestOption) ([]resmgmt.LifecycleInstallCCResponse, error) {
	fake.lifecycleInstallCCMutex.Lock()
	ret, specificReturn := fake.lifecycleInstallCCReturnsOnCall[len(fake.lifecycleInstallCCArgsForCall)]
	fake.lifecycleInstallCCArgsForCall = append(fake.lifecycleInstallCCArgsForCall, struct {
		arg1 resmgmt.LifecycleInstallCCRequest
		arg2 []resmgmt.RequestOption
	}{arg1, arg2})
	fake.recordInvocation("LifecycleInstallCC", []interface{}{arg1, arg2})
	fake.lifecycleInstallCCMutex.Unlock()
	if fake.LifecycleInstallCCStub != nil {
		return fake.LifecycleInstallCCStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.lifecycleInstallCCReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) LifecycleInstallCCCallCount() int {
	fake.lifecycleInstallCCMutex.RLock()
	defer fake.lifecycleInstallCCMutex.RUnlock()
	return len(fake.lifecycleInstallCCArgsForCall)
}

func (fake *ResourceManagement) LifecycleInstallCCCalls(stub func(resmgmt.LifecycleInstallCCRequest, ...resmgmt.RequestOption) ([]resmgmt.LifecycleInstallCCResponse, error)) {
	fake.lifecycleInstallCCMutex.Lock()
	defer fake.lifecycleInstallCCMutex.Unlock()
	fake.LifecycleInstallCCStub = stub
}

func (fake *ResourceManagement) LifecycleInstallCCArgsForCall(i int) (resmgmt.LifecycleInstallCCRequest, []resmgmt.RequestOption) {
	fake.lifecycleInstallCCMutex.RLock()
	defer fake.lifecycleInstallCCMutex.RUnlock()
	argsForCall := fake.lifecycleInstallCCArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ResourceManagement) LifecycleInstallCCReturns(result1 []resmgmt.LifecycleInstallCCResponse, result2 error) {
	fake.lifecycleInstallCCMutex.Lock()
	defer fake.lifecycleInstallCCMutex.Unlock()
	fake.LifecycleInstallCCStub = nil
	fake.lifecycleInstallCCReturns = struct {
		result1 []resmgmt.LifecycleInstallCCResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleInstallCCReturnsOnCall(i int, result1 []resmgmt.LifecycleInstallCCResponse, result2 error) {
	fake.lifecycleInstallCCMutex.Lock()
	defer fake.lifecycleInstallCCMutex.Unlock()
	fake.LifecycleInstallCCStub = nil
	if fake.lifecycleInstallCCReturnsOnCall == nil {
		fake.lifecycleInstallCCReturnsOnCall = make(map[int]struct {
			result1 []resmgmt.LifecycleInstallCCResponse
			result2 error
		})
	}
	fake.lifecycleInstallCCReturnsOnCall[i] = struct {
		result1 []resmgmt.LifecycleInstallCCResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleQueryApprovedCC(arg1 string, arg2 resmgmt.LifecycleQueryApprovedCCRequest, arg3 ...resmgmt.RequestOption) (resmgmt.LifecycleApprovedChaincodeDefinition, error) {
	fake.lifecycleQueryApprovedCCMutex.Lock()
	ret, specificReturn := fake.lifecycleQueryApprovedCCReturnsOnCall[len(fake.lifecycleQueryApprovedCCArgsForCall)]
	fake.lifecycleQueryApprovedCCArgsForCall = append(fake.lifecycleQueryApprovedCCArgsForCall, struct {
		arg1 string
		arg2 resmgmt.LifecycleQueryApprovedCCRequest
		arg3 []resmgmt.RequestOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("LifecycleQueryApprovedCC", []interface{}{arg1, arg2, arg3})
	fake.lifecycleQueryApprovedCCMutex.Unlock()
	if fake.LifecycleQueryApprovedCCStub != nil {
		return fake.LifecycleQueryApprovedCCStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.lifecycleQueryApprovedCCReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) LifecycleQueryApprovedCCCallCount() int {
	fake.lifecycleQueryApprovedCCMutex.RLock()
	defer fake.lifecycleQueryApprovedCCMutex.RUnlock()
	return len(fake.lifecycleQueryApprovedCCArgsForCall)
}

func (fake *ResourceManagement) LifecycleQueryApprovedCCCalls(stub func(string, resmgmt.LifecycleQueryApprovedCCRequest, ...resmgmt.RequestOption) (resmgmt.LifecycleApprovedChaincodeDefinition, error)) {
	fake.lifecycleQueryApprovedCCMutex.Lock()
	defer fake.lifecycleQueryApprovedCCMutex.Unlock()
	fake.LifecycleQueryApprovedCCStub = stub
}

func (fake *ResourceManagement) LifecycleQueryApprovedCCArgsForCall(i int) (string, resmgmt.LifecycleQueryApprovedCCRequest, []resmgmt.RequestOption) {
	fake.lifecycleQueryApprovedCCMutex.RLock()
	defer fake.lifecycleQueryApprovedCCMutex.RUnlock()
	argsForCall := fake.lifecycleQueryApprovedCCArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ResourceManagement) LifecycleQueryApprovedCCReturns(result1 resmgmt.LifecycleApprovedChaincodeDefinition, result2 error) {
	fake.lifecycleQueryApprovedCCMutex.Lock()
	defer fake.lifecycleQueryApprovedCCMutex.Unlock()
	fake.LifecycleQueryApprovedCCStub = nil
	fake.lifecycleQueryApprovedCCReturns = struct {
		result1 resmgmt.LifecycleApprovedChaincodeDefinition
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleQueryApprovedCCReturnsOnCall(i int, result1 resmgmt.LifecycleApprovedChaincodeDefinition, result2 error) {
	fake.lifecycleQueryApprovedCCMutex.Lock()
	defer fake.lifecycleQueryApprovedCCMutex.Unlock()
	fake.LifecycleQueryApprovedCCStub = nil
	if fake.lifecycleQueryApprovedCCReturnsOnCall == nil {
		fake.lifecycleQueryApprovedCCReturnsOnCall = make(map[int]struct {
			result1 resmgmt.LifecycleApprovedChaincodeDefinition
			result2 error
		})
	}
	fake.lifecycleQueryApprovedCCReturnsOnCall[i] = struct {
		result1 resmgmt.LifecycleApprovedChaincodeDefinition
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleQueryCommittedCC(arg1 string, arg2 resmgmt.LifecycleQueryCommittedCCRequest, arg3 ...resmgmt.RequestOption) ([]resmgmt.LifecycleChaincodeDefinition, error) {
	fake.lifecycleQueryCommittedCCMutex.Lock()
	ret, specificReturn := fake.lifecycleQueryCommittedCCReturnsOnCall[len(fake.lifecycleQueryCommittedCCArgsForCall)]
	fake.lifecycleQueryCommittedCCArgsForCall = append(fake.lifecycleQueryCommittedCCArgsForCall, struct {
		arg1 string
		arg2 resmgmt.LifecycleQueryCommittedCCRequest
		arg3 []resmgmt.RequestOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("LifecycleQueryCommittedCC", []interface{}{arg1, arg2, arg3})
	fake.lifecycleQueryCommittedCCMutex.Unlock()
	if fake.LifecycleQueryCommittedCCStub != nil {
		return fake.LifecycleQueryCommittedCCStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.lifecycleQueryCommittedCCReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) LifecycleQueryCommittedCCCallCount() int {
	fake.lifecycleQueryCommittedCCMutex.RLock()
	defer fake.lifecycleQueryCommittedCCMutex.RUnlock()
	return len(fake.lifecycleQueryCommittedCCArgsForCall)
}

func (fake *ResourceManagement) LifecycleQueryCommittedCCCalls(stub func(string, resmgmt.LifecycleQueryCommittedCCRequest, ...resmgmt.RequestOption) ([]resmgmt.LifecycleChaincodeDefinition, error)) {
	fake.lifecycleQueryCommittedCCMutex.Lock()
	defer fake.lifecycleQueryCommittedCCMutex.Unlock()
	fake.LifecycleQueryCommittedCCStub = stub
}

func (fake *ResourceManagement) LifecycleQueryCommittedCCArgsForCall(i int) (string, resmgmt.LifecycleQueryCommittedCCRequest, []resmgmt.RequestOption) {
	fake.lifecycleQueryCommittedCCMutex.RLock()
	defer fake.lifecycleQueryCommittedCCMutex.RUnlock()
	argsForCall := fake.lifecycleQueryCommittedCCArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ResourceManagement) LifecycleQueryCommittedCCReturns(result1 []resmgmt.LifecycleChaincodeDefinition, result2 error) {
	fake.lifecycleQueryCommittedCCMutex.Lock()
	defer fake.lifecycleQueryCommittedCCMutex.Unlock()
	fake.LifecycleQueryCommittedCCStub = nil
	fake.lifecycleQueryCommittedCCReturns = struct {
		result1 []resmgmt.LifecycleChaincodeDefinition
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleQueryCommittedCCReturnsOnCall(i int, result1 []resmgmt.LifecycleChaincodeDefinition, result2 error) {
	fake.lifecycleQueryCommittedCCMutex.Lock()
	defer fake.lifecycleQueryCommittedCCMutex.Unlock()
	fake.LifecycleQueryCommittedCCStub = nil
	if fake.lifecycleQueryCommittedCCReturnsOnCall == nil {
		fake.lifecycleQueryCommittedCCReturnsOnCall = make(map[int]struct {
			result1 []resmgmt.LifecycleChaincodeDefinition
			result2 error
		})
	}
	fake.lifecycleQueryCommittedCCReturnsOnCall[i] = struct {
		result1 []resmgmt.LifecycleChaincodeDefinition
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleQueryInstalledCC(arg1 ...resmgmt.RequestOption) ([]resmgmt.LifecycleInstalledCC, error) {
	fake.lifecycleQueryInstalledCCMutex.Lock()
	ret, specificReturn := fake.lifecycleQueryInstalledCCReturnsOnCall[len(fake.lifecycleQueryInstalledCCArgsForCall)]
	fake.lifecycleQueryInstalledCCArgsForCall = append(fake.lifecycleQueryInstalledCCArgsForCall, struct {
		arg1 []resmgmt.RequestOption
	}{arg1})
	fake.recordInvocation("LifecycleQueryInstalledCC", []interface{}{arg1})
	fake.lifecycleQueryInstalledCCMutex.Unlock()
	if fake.LifecycleQueryInstalledCCStub != nil {
		return fake.LifecycleQueryInstalledCCStub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.lifecycleQueryInstalledCCReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) LifecycleQueryInstalledCCCallCount() int {
	fake.lifecycleQueryInstalledCCMutex.RLock()
	defer fake.lifecycleQueryInstalledCCMutex.RUnlock()
	return len(fake.lifecycleQueryInstalledCCArgsForCall)
}

func (fake *ResourceManagement) LifecycleQueryInstalledCCCalls(stub func(...resmgmt.RequestOption) ([]resmgmt.LifecycleInstalledCC, error)) {
	fake.lifecycleQueryInstalledCCMutex.Lock()
	defer fake.lifecycleQueryInstalledCCMutex.Unlock()
	fake.LifecycleQueryInstalledCCStub = stub
}

func (fake *ResourceManagement) LifecycleQueryInstalledCCArgsForCall(i int) []resmgmt.RequestOption {
	fake.lifecycleQueryInstalledCCMutex.RLock()
	defer fake.lifecycleQueryInstalledCCMutex.RUnlock()
	argsForCall := fake.lifecycleQueryInstalledCCArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ResourceManagement) LifecycleQueryInstalledCCReturns(result1 []resmgmt.LifecycleInstalledCC, result2 error) {
	fake.lifecycleQueryInstalledCCMutex.Lock()
	defer fake.lifecycleQueryInstalledCCMutex.Unlock()
	fake.LifecycleQueryInstalledCCStub = nil
	fake.lifecycleQueryInstalledCCReturns = struct {
		result1 []resmgmt.LifecycleInstalledCC
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) LifecycleQueryInstalledCCReturnsOnCall(i int, result1 []resmgmt.LifecycleInstalledCC, result2 error) {
	fake.lifecycleQueryInstalledCCMutex.Lock()
	defer fake.lifecycleQueryInstalledCCMutex.Unlock()
	fake.LifecycleQueryInstalledCCStub = nil
	if fake.lifecycleQueryInstalledCCReturnsOnCall == nil {
		fake.lifecycleQueryInstalledCCReturnsOnCall = make(map[int]struct {
			result1 []resmgmt.LifecycleInstalledCC
			result2 error
		})
	}
	fake.lifecycleQueryInstalledCCReturnsOnCall[i] = struct {
		result1 []resmgmt.LifecycleInstalledCC
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) QueryChannels(arg1 ...resmgmt.RequestOption) (*peer.ChannelQueryResponse, error) {
	fake.queryChannelsMutex.Lock()
	ret, specificReturn := fake.queryChannelsReturnsOnCall[len(fake.queryChannelsArgsForCall)]
	fake.queryChannelsArgsForCall = append(fake.queryChannelsArgsForCall, struct {
		arg1 []resmgmt.RequestOption
	}{arg1})
	fake.recordInvocation("QueryChannels", []interface{}{arg1})
	fake.queryChannelsMutex.Unlock()
	if fake.QueryChannelsStub != nil {
		return fake.QueryChannelsStub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryChannelsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) QueryChannelsCallCount() int {
	fake.queryChannelsMutex.RLock()
	defer fake.queryChannelsMutex.RUnlock()
	return len(fake.queryChannelsArgsForCall)
}

func (fake *ResourceManagement) QueryChannelsCalls(stub func(...resmgmt.RequestOption) (*peer.ChannelQueryResponse, error)) {
	fake.queryChannelsMutex.Lock()
	defer fake.queryChannelsMutex.Unlock()
	fake.QueryChannelsStub = stub
}

func (fake *ResourceManagement) QueryChannelsArgsForCall(i int) []resmgmt.RequestOption {
	fake.queryChannelsMutex.RLock()
	defer fake.queryChannelsMutex.RUnlock()
	argsForCall := fake.queryChannelsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ResourceManagement) QueryChannelsReturns(result1 *peer.ChannelQueryResponse, result2 error) {
	fake.queryChannelsMutex.Lock()
	defer fake.queryChannelsMutex.Unlock()
	fake.QueryChannelsStub = nil
	fake.queryChannelsReturns = struct {
		result1 *peer.ChannelQueryResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) QueryChannelsReturnsOnCall(i int, result1 *peer.ChannelQueryResponse, result2 error) {
	fake.queryChannelsMutex.Lock()
	defer fake.queryChannelsMutex.Unlock()
	fake.QueryChannelsStub = nil
	if fake.queryChannelsReturnsOnCall == nil {
		fake.queryChannelsReturnsOnCall = make(map[int]struct {
			result1 *peer.ChannelQueryResponse
			result2 error
		})
	}
	fake.queryChannelsReturnsOnCall[i] = struct {
		result1 *peer.ChannelQueryResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) QueryCollectionsConfig(arg1 string, arg2 string, arg3 ...resmgmt.RequestOption) (*peer.CollectionConfigPackage, error) {
	fake.queryCollectionsConfigMutex.Lock()
	ret, specificReturn := fake.queryCollectionsConfigReturnsOnCall[len(fake.queryCollectionsConfigArgsForCall)]
	fake.queryCollectionsConfigArgsForCall = append(fake.queryCollectionsConfigArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 []resmgmt.RequestOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("QueryCollectionsConfig", []interface{}{arg1, arg2, arg3})
	fake.queryCollectionsConfigMutex.Unlock()
	if fake.QueryCollectionsConfigStub != nil {
		return fake.QueryCollectionsConfigStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryCollectionsConfigReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) QueryCollectionsConfigCallCount() int {
	fake.queryCollectionsConfigMutex.RLock()
	defer fake.queryCollectionsConfigMutex.RUnlock()
	return len(fake.queryCollectionsConfigArgsForCall)
}

func (fake *ResourceManagement) QueryCollectionsConfigCalls(stub func(string, string, ...resmgmt.RequestOption) (*peer.CollectionConfigPackage, error)) {
	fake.queryCollectionsConfigMutex.Lock()
	defer fake.queryCollectionsConfigMutex.Unlock()
	fake.QueryCollectionsConfigStub = stub
}

func (fake *ResourceManagement) QueryCollectionsConfigArgsForCall(i int) (string, string, []resmgmt.RequestOption) {
	fake.queryCollectionsConfigMutex.RLock()
	defer fake.queryCollectionsConfigMutex.RUnlock()
	argsForCall := fake.queryCollectionsConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ResourceManagement) QueryCollectionsConfigReturns(result1 *peer.CollectionConfigPackage, result2 error) {
	fake.queryCollectionsConfigMutex.Lock()
	defer fake.queryCollectionsConfigMutex.Unlock()
	fake.QueryCollectionsConfigStub = nil
	fake.queryCollectionsConfigReturns = struct {
		result1 *peer.CollectionConfigPackage
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) QueryCollectionsConfigReturnsOnCall(i int, result1 *peer.CollectionConfigPackage, result2 error) {
	fake.queryCollectionsConfigMutex.Lock()
	defer fake.queryCollectionsConfigMutex.Unlock()
	fake.QueryCollectionsConfigStub = nil
	if fake.queryCollectionsConfigReturnsOnCall == nil {
		fake.queryCollectionsConfigReturnsOnCall = make(map[int]struct {
			result1 *peer.CollectionConfigPackage
			result2 error
		})
	}
	fake.queryCollectionsConfigReturnsOnCall[i] = struct {
		result1 *peer.CollectionConfigPackage
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) QueryConfigFromOrderer(arg1 string, arg2 ...resmgmt.RequestOption) (fab.ChannelCfg, error) {
	fake.queryConfigFromOrdererMutex.Lock()
	ret, specificReturn := fake.queryConfigFromOrdererReturnsOnCall[len(fake.queryConfigFromOrdererArgsForCall)]
	fake.queryConfigFromOrdererArgsForCall = append(fake.queryConfigFromOrdererArgsForCall, struct {
		arg1 string
		arg2 []resmgmt.RequestOption
	}{arg1, arg2})
	fake.recordInvocation("QueryConfigFromOrderer", []interface{}{arg1, arg2})
	fake.queryConfigFromOrdererMutex.Unlock()
	if fake.QueryConfigFromOrdererStub != nil {
		return fake.QueryConfigFromOrdererStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryConfigFromOrdererReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) QueryConfigFromOrdererCallCount() int {
	fake.queryConfigFromOrdererMutex.RLock()
	defer fake.queryConfigFromOrdererMutex.RUnlock()
	return len(fake.queryConfigFromOrdererArgsForCall)
}

func (fake *ResourceManagement) QueryConfigFromOrdererCalls(stub func(string, ...resmgmt.RequestOption) (fab.ChannelCfg, error)) {
	fake.queryConfigFromOrdererMutex.Lock()
	defer fake.queryConfigFromOrdererMutex.Unlock()
	fake.QueryConfigFromOrdererStub = stub
}

func (fake *ResourceManagement) QueryConfigFromOrdererArgsForCall(i int) (string, []resmgmt.RequestOption) {
	fake.queryConfigFromOrdererMutex.RLock()
	defer fake.queryConfigFromOrdererMutex.RUnlock()
	argsForCall := fake.queryConfigFromOrdererArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ResourceManagement) QueryConfigFromOrdererReturns(result1 fab.ChannelCfg, result2 error) {
	fake.queryConfigFromOrdererMutex.Lock()
	defer fake.queryConfigFromOrdererMutex.Unlock()
	fake.QueryConfigFromOrdererStub = nil
	fake.queryConfigFromOrdererReturns = struct {
		result1 fab.ChannelCfg
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) QueryConfigFromOrdererReturnsOnCall(i int, result1 fab.ChannelCfg, result2 error) {
	fake.queryConfigFromOrdererMutex.Lock()
	defer fake.queryConfigFromOrdererMutex.Unlock()
	fake.QueryConfigFromOrdererStub = nil
	if fake.queryConfigFromOrdererReturnsOnCall == nil {
		fake.queryConfigFromOrdererReturnsOnCall = make(map[int]struct {
			result1 fab.ChannelCfg
			result2 error
		})
	}
	fake.queryConfigFromOrdererReturnsOnCall[i] = struct {
		result1 fab.ChannelCfg
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) QueryInstalledChaincodes(arg1 ...resmgmt.RequestOption) (*peer.ChaincodeQueryResponse, error) {
	fake.queryInstalledChaincodesMutex.Lock()
	ret, specificReturn := fake.queryInstalledChaincodesReturnsOnCall[len(fake.queryInstalledChaincodesArgsForCall)]
	fake.queryInstalledChaincodesArgsForCall = append(fake.queryInstalledChaincodesArgsForCall, struct {
		arg1 []resmgmt.RequestOption
	}{arg1})
	fake.recordInvocation("QueryInstalledChaincodes", []interface{}{arg1})
	fake.queryInstalledChaincodesMutex.Unlock()
	if fake.QueryInstalledChaincodesStub != nil {
		return fake.QueryInstalledChaincodesStub(arg1...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryInstalledChaincodesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) QueryInstalledChaincodesCallCount() int {
	fake.queryInstalledChaincodesMutex.RLock()
	defer fake.queryInstalledChaincodesMutex.RUnlock()
	return len(fake.queryInstalledChaincodesArgsForCall)
}

func (fake *ResourceManagement) QueryInstalledChaincodesCalls(stub func(...resmgmt.RequestOption) (*peer.ChaincodeQueryResponse, error)) {
	fake.queryInstalledChaincodesMutex.Lock()
	defer fake.queryInstalledChaincodesMutex.Unlock()
	fake.QueryInstalledChaincodesStub = stub
}

func (fake *ResourceManagement) QueryInstalledChaincodesArgsForCall(i int) []resmgmt.RequestOption {
	fake.queryInstalledChaincodesMutex.RLock()
	defer fake.queryInstalledChaincodesMutex.RUnlock()
	argsForCall := fake.queryInstalledChaincodesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ResourceManagement) QueryInstalledChaincodesReturns(result1 *peer.ChaincodeQueryResponse, result2 error) {
	fake.queryInstalledChaincodesMutex.Lock()
	defer fake.queryInstalledChaincodesMutex.Unlock()
	fake.QueryInstalledChaincodesStub = nil
	fake.queryInstalledChaincodesReturns = struct {
		result1 *peer.ChaincodeQueryResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) QueryInstalledChaincodesReturnsOnCall(i int, result1 *peer.ChaincodeQueryResponse, result2 error) {
	fake.queryInstalledChaincodesMutex.Lock()
	defer fake.queryInstalledChaincodesMutex.Unlock()
	fake.QueryInstalledChaincodesStub = nil
	if fake.queryInstalledChaincodesReturnsOnCall == nil {
		fake.queryInstalledChaincodesReturnsOnCall = make(map[int]struct {
			result1 *peer.ChaincodeQueryResponse
			result2 error
		})
	}
	fake.queryInstalledChaincodesReturnsOnCall[i] = struct {
		result1 *peer.ChaincodeQueryResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) QueryInstantiatedChaincodes(arg1 string, arg2 ...resmgmt.RequestOption) (*peer.ChaincodeQueryResponse, error) {
	fake.queryInstantiatedChaincodesMutex.Lock()
	ret, specificReturn := fake.queryInstantiatedChaincodesReturnsOnCall[len(fake.queryInstantiatedChaincodesArgsForCall)]
	fake.queryInstantiatedChaincodesArgsForCall = append(fake.queryInstantiatedChaincodesArgsForCall, struct {
		arg1 string
		arg2 []resmgmt.RequestOption
	}{arg1, arg2})
	fake.recordInvocation("QueryInstantiatedChaincodes", []interface{}{arg1, arg2})
	fake.queryInstantiatedChaincodesMutex.Unlock()
	if fake.QueryInstantiatedChaincodesStub != nil {
		return fake.QueryInstantiatedChaincodesStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.queryInstantiatedChaincodesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) QueryInstantiatedChaincodesCallCount() int {
	fake.queryInstantiatedChaincodesMutex.RLock()
	defer fake.queryInstantiatedChaincodesMutex.RUnlock()
	return len(fake.queryInstantiatedChaincodesArgsForCall)
}

func (fake *ResourceManagement) QueryInstantiatedChaincodesCalls(stub func(string, ...resmgmt.RequestOption) (*peer.ChaincodeQueryResponse, error)) {
	fake.queryInstantiatedChaincodesMutex.Lock()
	defer fake.queryInstantiatedChaincodesMutex.Unlock()
	fake.QueryInstantiatedChaincodesStub = stub
}

func (fake *ResourceManagement) QueryInstantiatedChaincodesArgsForCall(i int) (string, []resmgmt.RequestOption) {
	fake.queryInstantiatedChaincodesMutex.RLock()
	defer fake.queryInstantiatedChaincodesMutex.RUnlock()
	argsForCall := fake.queryInstantiatedChaincodesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ResourceManagement) QueryInstantiatedChaincodesReturns(result1 *peer.ChaincodeQueryResponse, result2 error) {
	fake.queryInstantiatedChaincodesMutex.Lock()
	defer fake.queryInstantiatedChaincodesMutex.Unlock()
	fake.QueryInstantiatedChaincodesStub = nil
	fake.queryInstantiatedChaincodesReturns = struct {
		result1 *peer.ChaincodeQueryResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) QueryInstantiatedChaincodesReturnsOnCall(i int, result1 *peer.ChaincodeQueryResponse, result2 error) {
	fake.queryInstantiatedChaincodesMutex.Lock()
	defer fake.queryInstantiatedChaincodesMutex.Unlock()
	fake.QueryInstantiatedChaincodesStub = nil
	if fake.queryInstantiatedChaincodesReturnsOnCall == nil {
		fake.queryInstantiatedChaincodesReturnsOnCall = make(map[int]struct {
			result1 *peer.ChaincodeQueryResponse
			result2 error
		})
	}
	fake.queryInstantiatedChaincodesReturnsOnCall[i] = struct {
		result1 *peer.ChaincodeQueryResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) SaveChannel(arg1 resmgmt.SaveChannelRequest, arg2 ...resmgmt.RequestOption) (resmgmt.SaveChannelResponse, error) {
	fake.saveChannelMutex.Lock()
	ret, specificReturn := fake.saveChannelReturnsOnCall[len(fake.saveChannelArgsForCall)]
	fake.saveChannelArgsForCall = append(fake.saveChannelArgsForCall, struct {
		arg1 resmgmt.SaveChannelRequest
		arg2 []resmgmt.RequestOption
	}{arg1, arg2})
	fake.recordInvocation("SaveChannel", []interface{}{arg1, arg2})
	fake.saveChannelMutex.Unlock()
	if fake.SaveChannelStub != nil {
		return fake.SaveChannelStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.saveChannelReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) SaveChannelCallCount() int {
	fake.saveChannelMutex.RLock()
	defer fake.saveChannelMutex.RUnlock()
	return len(fake.saveChannelArgsForCall)
}

func (fake *ResourceManagement) SaveChannelCalls(stub func(resmgmt.SaveChannelRequest, ...resmgmt.RequestOption) (resmgmt.SaveChannelResponse, error)) {
	fake.saveChannelMutex.Lock()
	defer fake.saveChannelMutex.Unlock()
	fake.SaveChannelStub = stub
}

func (fake *ResourceManagement) SaveChannelArgsForCall(i int) (resmgmt.SaveChannelRequest, []resmgmt.RequestOption) {
	fake.saveChannelMutex.RLock()
	defer fake.saveChannelMutex.RUnlock()
	argsForCall := fake.saveChannelArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ResourceManagement) SaveChannelReturns(result1 resmgmt.SaveChannelResponse, result2 error) {
	fake.saveChannelMutex.Lock()
	defer fake.saveChannelMutex.Unlock()
	fake.SaveChannelStub = nil
	fake.saveChannelReturns = struct {
		result1 resmgmt.SaveChannelResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) SaveChannelReturnsOnCall(i int, result1 resmgmt.SaveChannelResponse, result2 error) {
	fake.saveChannelMutex.Lock()
	defer fake.saveChannelMutex.Unlock()
	fake.SaveChannelStub = nil
	if fake.saveChannelReturnsOnCall == nil {
		fake.saveChannelReturnsOnCall = make(map[int]struct {
			result1 resmgmt.SaveChannelResponse
			result2 error
		})
	}
	fake.saveChannelReturnsOnCall[i] = struct {
		result1 resmgmt.SaveChannelResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) UpgradeCC(arg1 string, arg2 resmgmt.UpgradeCCRequest, arg3 ...resmgmt.RequestOption) (resmgmt.UpgradeCCResponse, error) {
	fake.upgradeCCMutex.Lock()
	ret, specificReturn := fake.upgradeCCReturnsOnCall[len(fake.upgradeCCArgsForCall)]
	fake.upgradeCCArgsForCall = append(fake.upgradeCCArgsForCall, struct {
		arg1 string
		arg2 resmgmt.UpgradeCCRequest
		arg3 []resmgmt.RequestOption
	}{arg1, arg2, arg3})
	fake.recordInvocation("UpgradeCC", []interface{}{arg1, arg2, arg3})
	fake.upgradeCCMutex.Unlock()
	if fake.UpgradeCCStub != nil {
		return fake.UpgradeCCStub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.upgradeCCReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ResourceManagement) UpgradeCCCallCount() int {
	fake.upgradeCCMutex.RLock()
	defer fake.upgradeCCMutex.RUnlock()
	return len(fake.upgradeCCArgsForCall)
}

func (fake *ResourceManagement) UpgradeCCCalls(stub func(string, resmgmt.UpgradeCCRequest, ...resmgmt.RequestOption) (resmgmt.UpgradeCCResponse, error)) {
	fake.upgradeCCMutex.Lock()
	defer fake.upgradeCCMutex.Unlock()
	fake.UpgradeCCStub = stub
}

func (fake *ResourceManagement) UpgradeCCArgsForCall(i int) (string, resmgmt.UpgradeCCRequest, []resmgmt.RequestOption) {
	fake.upgradeCCMutex.RLock()
	defer fake.upgradeCCMutex.RUnlock()
	argsForCall := fake.upgradeCCArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ResourceManagement) UpgradeCCReturns(result1 resmgmt.UpgradeCCResponse, result2 error) {
	fake.upgradeCCMutex.Lock()
	defer fake.upgradeCCMutex.Unlock()
	fake.UpgradeCCStub = nil
	fake.upgradeCCReturns = struct {
		result1 resmgmt.UpgradeCCResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) UpgradeCCReturnsOnCall(i int, result1 resmgmt.UpgradeCCResponse, result2 error) {
	fake.upgradeCCMutex.Lock()
	defer fake.upgradeCCMutex.Unlock()
	fake.UpgradeCCStub = nil
	if fake.upgradeCCReturnsOnCall == nil {
		fake.upgradeCCReturnsOnCall = make(map[int]struct {
			result1 resmgmt.UpgradeCCResponse
			result2 error
		})
	}
	fake.upgradeCCReturnsOnCall[i] = struct {
		result1 resmgmt.UpgradeCCResponse
		result2 error
	}{result1, result2}
}

func (fake *ResourceManagement) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createConfigSignatureMutex.RLock()
	defer fake.createConfigSignatureMutex.RUnlock()
	fake.createConfigSignatureDataMutex.RLock()
	defer fake.createConfigSignatureDataMutex.RUnlock()
	fake.installCCMutex.RLock()
	defer fake.installCCMutex.RUnlock()
	fake.instantiateCCMutex.RLock()
	defer fake.instantiateCCMutex.RUnlock()
	fake.joinChannelMutex.RLock()
	defer fake.joinChannelMutex.RUnlock()
	fake.lifecycleApproveCCMutex.RLock()
	defer fake.lifecycleApproveCCMutex.RUnlock()
	fake.lifecycleCheckCCCommitReadinessMutex.RLock()
	defer fake.lifecycleCheckCCCommitReadinessMutex.RUnlock()
	fake.lifecycleCommitCCMutex.RLock()
	defer fake.lifecycleCommitCCMutex.RUnlock()
	fake.lifecycleInstallCCMutex.RLock()
	defer fake.lifecycleInstallCCMutex.RUnlock()
	fake.lifecycleQueryApprovedCCMutex.RLock()
	defer fake.lifecycleQueryApprovedCCMutex.RUnlock()
	fake.lifecycleQueryCommittedCCMutex.RLock()
	defer fake.lifecycleQueryCommittedCCMutex.RUnlock()
	fake.lifecycleQueryInstalledCCMutex.RLock()
	defer fake.lifecycleQueryInstalledCCMutex.RUnlock()
	fake.queryChannelsMutex.RLock()
	defer fake.queryChannelsMutex.RUnlock()
	fake.queryCollectionsConfigMutex.RLock()
	defer fake.queryCollectionsConfigMutex.RUnlock()
	fake.queryConfigFromOrdererMutex.RLock()
	defer fake.queryConfigFromOrdererMutex.RUnlock()
	fake.queryInstalledChaincodesMutex.RLock()
	defer fake.queryInstalledChaincodesMutex.RUnlock()
	fake.queryInstantiatedChaincodesMutex.RLock()
	defer fake.queryInstantiatedChaincodesMutex.RUnlock()
	fake.saveChannelMutex.RLock()
	defer fake.saveChannelMutex.RUnlock()
	fake.upgradeCCMutex.RLock()
	defer fake.upgradeCCMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ResourceManagement) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fabric.ResourceManagement = new(ResourceManagement)
